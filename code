#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<ctype.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<unistd.h>
#include<fcntl.h>
#define LEN 55
#define MAXROWS 45000
#define MAXCOLS 8
#define nosegfault // printf("no seg fault till line %d\n",__LINE__)
typedef long long int lld;
struct table{
   int no_of_rows;
   int no_of_cols;
   char name[LEN];
   char cols[MAXCOLS][LEN];
   struct typedatarow{
      struct onecell{
         char type;
         union{
            float f;
            int d;
            char s[LEN];
         }data;
      }cell[MAXCOLS];
   }datarow[MAXROWS];
}tables[5];

int no_of_tables=0;
int findcol(struct table *T, char *q)
{
   int i;
   for(i=0;i<(T->no_of_cols);i++)
      if(strcasecmp(q,(T->cols[i]))==0){
         //printf("column |%s| found\n",q);
         return i;
      }
   //   printf("column |%s| not found\n",q);
   return -1;
}
struct table *findtable(char *q)
{
   int i;
   for(i=0;i<no_of_tables;i++)
      if(strcasecmp(tables[i].name,q)==0)
         return &tables[i];
   printf("Table not found\n");
   return NULL;
}
int fd=-1;
void printonecell(struct onecell *c)
{
   char tmp[LEN];
   switch(c->type){
      case 's':
         if(fd==-1)
            printf("\t%s",(c->data).s);
         else 
            write(fd,tmp,sprintf(tmp,"\t%s",(c->data).s));

         break;
      case 'f':
         if(fd==-1)
            printf("\t%f",(c->data).f);
         else 
            write(fd,tmp,sprintf(tmp,"\t%f",(c->data).f));
         break;
      case 'd':
         if(fd==-1)
            printf("\t%d",(c->data).d);
         else 
            write(fd,tmp,sprintf(tmp,"\t%d",(c->data).d));
         break;
         //default: printf("unknown format; printing not possible\n");
   };
}
int onecellcmp(struct onecell *a, struct onecell *b)
{
   //printf("types are %c and %c\n",a->type,b->type);
   if(((a->type)=='s')&&((b->type)=='s'))
      return strcmp((a->data).s,(b->data).s);
   else if(((a->type)=='f')&& ((b->type)=='f')){
      float val=((a->data).f)-((b->data).f);
      if(val>0) return 1;
      if(val<0) return -1;
      return 0;
   }
   else if(((a->type)=='d')&& ((b->type)=='d'))
      return (a->data).d-(b->data).d;
   else if(((a->type)=='d')&& ((b->type)=='f'))
      return ((((float)((a->data).d)-((b->data).f))>0)?1:-1);
   else if(((a->type)=='f')&& ((b->type)=='d'))
      return ((((float)((a->data).f)-((b->data).d))>0)?1:-1);

   return 0;//fuck it - they are equal
}
int check_where_condition(struct table *T,int row,int keycol,char *sign,struct onecell *refkey)
{
   if(keycol==-1) return 1;
   struct onecell *key=refkey;
   if(refkey->type < 0 )
      key=&(T->datarow[row]).cell[-(refkey->type)];

   if(strcasecmp(sign,"e")==0)
      return (onecellcmp(&(T->datarow[row]).cell[keycol],key)==0);

   else if(strcasecmp(sign,"g")==0)
      return (onecellcmp(&(T->datarow[row]).cell[keycol],key)>0);

   else if(strcasecmp(sign,"l")==0)
      return (onecellcmp(&(T->datarow[row]).cell[keycol],key)<0);

   else if(strcasecmp(sign,"le")==0)
      return (check_where_condition(T,row,keycol,"l",key)||check_where_condition(T,row,keycol,"e",key));

   else if(strcasecmp(sign,"ge")==0)
      return (check_where_condition(T,row,keycol,"g",key)||check_where_condition(T,row,keycol,"e",key));

   else if(strcasecmp(sign,"ne")==0)
      return !check_where_condition(T,row,keycol,"e",key);
   else printf("condition %s not recognized\n",sign);
   return 0;
}
void print(struct table *T, int *cols, int cnt,int keycol,char *sign,struct onecell *key,int distinct_col)
{
   int k,j;
   struct onecell a[MAXROWS];
   int cntr=0,i;
   nosegfault;
   for(k=0;k<(T->no_of_rows);k++)
      if(check_where_condition(T,k,keycol,sign,key))
      {
         if(distinct_col==-1)
         {//handling queries of type select * from <table1>, <table2> where <col1>=<col2>
            for(j=0;(j<cnt)&&(j<(T->no_of_cols));j++)
               printonecell(&((T->datarow[k]).cell[cols[j]]));
            if(fd!=-1)write(fd,"\n",1);
            else
               printf("\n");
         }
         else//distinct condition exists - only one col will be printed
            a[cntr++]=(T->datarow[k]).cell[distinct_col];
      }

   if(distinct_col!=-1){
      qsort(a,cntr,sizeof(struct onecell),onecellcmp);
      printonecell(&a[0]);//there exists at least one valid result
      printf("\n");
      for(i=1;i<cntr;i++)
         if(onecellcmp(&a[i],&a[i-1])){
            printonecell(&a[i]);
            if(fd!=-1)write(fd,"\n",1);
            else
               printf("\n");
         }
   }
   printf("\n\n");
}
int whichtables(char *q,struct table **t)
{
   int i=0;
   char delim[]={" ,\t\n()"};
   q=strcasestr(q,"FROM")+4;
   q=strtok(q,delim);
   while(q&&(strcasecmp(q,"where"))){
      t[i]=findtable(q);
      i++;
      q=strtok(NULL,delim);
   }
   return i;
}
void findsign(char *sign,char *query)
{
   if(strstr(query,">="))
      strcpy(sign,"ge");
   else if(strstr(query,"<="))
      strcpy(sign,"le");
   else if(strstr(query,"!="))
      strcpy(sign,"ne");
   else if(strstr(query,">"))
      strcpy(sign,"g");
   else if(strstr(query,"<"))
      strcpy(sign,"l");
   else if(strstr(query,"="))
      strcpy(sign,"e");
}
int isstring(char *s)
{
   int dots=0;
   if(*s=='-') ++s;
   for(;*s;++s){
      if(*s=='.'){
         if((dots+=1)>1) return 1;
      }
      else if(!isdigit(*s)) return 1;
   }
   return 0;
}
void store(struct onecell *p,char *s)
{
   //assumption: s is a single, null-terminated string
   //printf("considering |%s|\t",s);
   s[strlen(s)-1]='\0';
   s++;
   if(isstring(s)){
      p->type='s';
      strcpy((p->data).s,s);
   }
   else if(strchr(s,'.')){
      p->type='f';
      (p->data).f=atof(s);
   }
   else{
      p->type='d';
      (p->data).d=atoi(s);
   }
   //printf("it's a %c\n",p->type);
}
void storethis(struct table *T,struct onecell *p,char *s)
{
   //assumption: s is a single, null-terminated string
   if(s[0]=='^')
      p->type=-findcol(T,s+1);
   else if(isstring(s)){
      p->type='s';
      strcpy((p->data).s,s);
   }
   else if(strchr(s,'.')){
      p->type='f';
      (p->data).f=atof(s);
   }
   else{
      p->type='d';
      (p->data).d=atoi(s);
   }
}
int wherecondition(struct table *T,char *query,char *sign,struct onecell *c)
{//assuming only one where condition
   char delim[]={" ,\t()\n=<>!"};
   char q[1000],*r;
   int col;
   if(!strcasestr(query,"where")) return -1;
   else{
      strcpy(q,query);
      r=strcasestr(q,"where")+strlen("where");
      findsign(sign,q);
      r=strtok(r,delim);
      col=findcol(T,r);
      r=strtok(NULL,delim);
      storethis(T,c,r);
   }
   return col;
}
void join(struct table **t,char *p)
{
   struct table *T1=t[0];
   struct table *T2=t[1];
   int i,j,k;
   int freeforall=0;
   char *q=strcasestr(p,"where");
   int f,s;
   if(q==NULL) freeforall=1;
   else{
      q+=strlen("where");
      char delim[]=" \t(0,.)=!<>\n";
      f=findcol(T1,strtok(q,delim));
      s=findcol(T2,strtok(NULL,delim));
   }
   for(i=0;i<(T1->no_of_rows);i++)
      for(j=0;j<(T2->no_of_rows);j++)
         if((freeforall)||
               (onecellcmp(&(T1->datarow[i]).cell[f],
                           &(T2->datarow[i]).cell[s])
                ==0)){
            for(k=0;k<(T1->no_of_cols);k++)
               printonecell(&((T1->datarow[i]).cell[k]));
            for(k=0;k<(T2->no_of_cols);k++)
               printonecell(&((T2->datarow[j]).cell[k]));
            if(fd!=-1)write(fd,"\n",1);
            else
               printf("\n");
         }
}
int open_pipe_file(char *q)
{
   char *r;
   if((r=strchr(q,'|'))==NULL) return -1;
   *r='\0';
   r++;
   r+=strspn(r,"|\t ");
   return creat(r, S_IRUSR|S_IWUSR|S_IRGRP|S_IWGRP|S_IROTH);
}
void processquery(char *query)
{
   char delim[]={" ,\t()\n"};
   char *q,backupquery[1000],sign[10];
   int columns[MAXCOLS];
   int cnt=0,i,loopc,keycol,distinct_col=-1;
   struct table *tt[5];
   struct table *T;
   struct onecell key;
   fd=open_pipe_file(query);
   strcpy(backupquery,query);
   int looptill=whichtables(query,tt);

   strcpy(query,backupquery);

   if(looptill>1){ 
      join(tt,query);
      return;
   }
   for(loopc=0;loopc<looptill;loopc++){
      strcpy(query,backupquery);
      T=tt[loopc];
      if(T==NULL) continue;
      //printf("looking in table %s\n",T->name);
      cnt=0,distinct_col=-1;
      keycol=wherecondition(T,query,sign,&key);
      q=query+strlen("SELECT");
      q=strtok(q,delim);
      distinct_col=-1;
      if(strcasecmp(q,"*")==0){
         for(i=0;i<(T->no_of_cols);i++)
            columns[cnt++]=i;
      }
      else if(strcasecmp(q,"DISTINCT")==0){//only one of these cases is possible
         q+=strlen("DISTINCT");
         q=strtok(NULL,delim);
         distinct_col=findcol(T,q);
         columns[cnt++]=distinct_col;
         nosegfault;
      }
      else{ 
         while(strcasecmp(q,"FROM")!=0){
            columns[cnt++]=findcol(T,q);
            //printf("using column %d\n",columns[cnt-1]);
            q=strtok(NULL,delim);
         }
      }
      print(T,columns,cnt,keycol,sign,&key,distinct_col);
   }
   if(fd==-1) close(fd);
}
int fp;
char scanline(char *q,int where)
{
   int cnt=0;
   if(where==0)
      return (scanf(" %[^\n]",q)!=EOF);
   else{
      while (read(fp,q+cnt,1)!=0){
         if(q[cnt]=='\n'){
            q[cnt]='\0';
            return 1;
         }
         cnt++;
      }
   }
   close(fp);
   q[cnt]='\0';
   return 0;
}
void scantable(struct table *T,char *filename)
{
   char onerow[MAXCOLS*(LEN+5)],*q;
   int line=0,cnt;
   char delim[]=",";
   if((fp=open(filename,O_RDONLY))==-1){
      fprintf(stderr,"database %s not found\n",filename);
      exit(0);
   }
   scanline(onerow,1);
   strcpy(T->name,filename);
   printf("Table name is %s\n",T->name);
   q=strtok(onerow,delim);
   cnt=0;
   do{
      q[strlen(q)-1]='\0';
      strcpy(T->cols[cnt++],q+1);
   }while((q=strtok(NULL,delim))!=NULL);

   T->no_of_cols=cnt;
   line=0;
   while(scanline(onerow,1)){
      cnt=0;
      q=strtok(onerow,delim);
      do{
         store(&((T->datarow[line]).cell[cnt++]),q);
      }while((q=strtok(NULL,delim))!=NULL);
      line++;
   }
   T->no_of_rows=line;
   printf("total rows %d\n",T->no_of_rows);
}
int main(int argc, char *argv[])
{
   int i;
   char query[1000];
   for(i=1;i<argc;i++){
      scantable(&tables[i-1],argv[i]);
      no_of_tables++;
   }
   printf("scanning over\n");
   while(printf("\n$"),scanline(query,0))
      processquery(query);
   printf("\n");
   return 0;
}
